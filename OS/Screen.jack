// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        do Screen.clearScreen();

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) {
            do Memory.poke(16384 + i, false);
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask, value;

        let address = 16384 + (y * 32) + (x / 16);
        let mask = Math.pow(2, 15 - Math.mod(x, 16));
        let value = Memory.peek(address);
        let value = (~(color) & ~(~(value) | mask)) | (color & (value | mask));
        do Memory.poke(address, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int h, v;
        var int dX, dY;
        var int dirX, dirY;
        var int distH, distV;

        let h = 0;
        let v = 0;
        let dX = (x2 - x1);
        let dY = (y2 - y1);
        let dirX = dX / Math.abs(dX);
        let dirY = dY / Math.abs(dY);

        while (~(h = dX) | ~(v = dY)) {
            let distH = Math.abs(dX - h - dirX) + Math.abs(dY - v);
            let distV = Math.abs(dX - h) + Math.abs(dY - v - dirY);

            if (distH > distV) {
                let h = h + dirX;
            } else {
                let v = v + dirY;
            }

            do Screen.drawPixel(x1 + h, y1 + v);
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i, i1, dI;

        let i = 0;
        let i1 = Math.min(y1, y2);
        let dI = Math.max(y1, y2) - i1 + 1;

        while (i < dI) {
            do Screen.drawLine(x1, i1 + i, x2, i1 + i);
            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i, sqrt;

        let i = -r;
        while (i < r + 1) {
            let sqrt = Math.sqrt((r * r) - (i * i));
            do Screen.drawLine(x - sqrt, y + i, x + sqrt, y + i);
            let i = i + 1;
        }

        return;
    }
}
