// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return ((x < 0) & (-x)) | ((x > -1) & x);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, mask, i;

        let sum = 0;
        let shiftedX = x;
        let mask = 1;

        let i = 0;
        while (i < 16) {
            if (y & mask) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let mask = mask + mask;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;

        if (x = 0) {
            return 0;
        }
        if (y = 0) {
            return 0;
        }
        if ((x < 0) & (y < 0)) {
            return Math.abs(x) / Math.abs(y);
        }
        if ((x < 0) | (y < 0)) {
            return -(Math.abs(x) / Math.abs(y));
        }
        if (y > x) {
            return 0;
        }

        let q = x / (y + y);
        if ((x - (2 * q * y)) < y) {
            return q + q;
        }
        
        return q + q + 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, j2, k, l;

        let y = 0;
        let j2 = 256;

        let j = 7;
        while ((j + 1) > 0) {
            let j2 = j2 / 2;
            let k = y + j2;
            let l = k * k;
            if (l < (x + 1)) {
                let y = k;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        return ((a < b) & b) | (((a + 1) > b) & a);
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        return ((a < b) & a) | (((a + 1) > b) & b);
    }

    /** Return the modulo of two number */
    function int mod(int x, int y) {
        var int res;
        let res =  x - ((x / y) * y);
        return res;
    }

    /** Return x to the power of y */
    function int pow(int x, int y) {
        if (y = 0) {
            return 1;
        }
        if (y = 1) {
            return x;
        }
        if (y & 1) {
            return x * Math.pow(x * x, (y - 1) / 2);
        }
        return Math.pow(x * x, y / 2);
    }
}
