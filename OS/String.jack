// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array chars;
    field int size, maxSize;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let chars = Array.new(Math.max(maxLength, 1));
        let size = 0;
        let maxSize = maxLength;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        do Memory.deAlloc(this);

        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j > -1) & (j < maxSize)) {
            return chars[j];
        } else {
            return 0;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > -1) & (j < maxSize)) {
            let chars[j] = c;
        }

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (size < maxSize) {
            let chars[size] = c;
            let size = size + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (size > 0) {
            let size = size - 1;
            let chars[size] = 0;
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int n, i;

        let n = 0;

        let i = 0;
        while ((i < size) & (chars[i] > 47) & (chars[i] < 58)) {
            let n = (n * 10) + (chars[i] - 48);
            let i = i + 1;
        }

        return n;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int last;
        var int c;

        let size = 0;

        let last = Math.mod(val, 10) + 48;
        let c = last;

        if (val > 9) {
            do setInt(val / 10);
        } 
        do appendChar(c);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
